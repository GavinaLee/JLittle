# DEBUG,INFO,WARN,ERROR,FATAL
#通过根日志记录器指定日志级别及输出源 
#日志输出的优先级： debug < info < warn < error < fatal
#定义根日志记录器的日志级别(info)及输出源的别名(console,myFile)
#该定义让日志在控制台和文件输出，并且只输出info级别以上的日志
LOG_LEVEL=DEBUG
log4j.rootLogger=${LOG_LEVEL},CONSOLE,FILE

#######配置输出源console的具体实现为控制台输出#######
#定义输出源别名console（即根日志记录器定义的输出源）
#的实现类是ConsoleAppender（控制台输出源）log4j.appender.console=org.apache.log4j.ConsoleAppender 
#指定日志输出格式的格式转换器为PatternLayout实现类
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Encoding=utf-8
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout 
log4j.appender.CONSOLE.layout.ConversionPattern=[%-5p] %d{yyyy-MM-dd HH:mm:ss} %C{1}@(%F:%L):%m%n


#######配置输出源myFile的具体实现为文件输出#######
#定义输出源别名myFile（即根日志记录器定义的输出源）
#的实现类是RollingFileAppender（文件输出源）log4j.appender.myFile=org.apache.log4j.RollingFileAppender
#定义日志文件的存储路径
log4j.appender.FILE=org.apache.log4j.DailyRollingFileAppender
log4j.appender.FILE.File=d:/logs/workorder.log
log4j.appender.FILE.Encoding=utf-8
log4j.appender.FILE.DatePattern='.'yyyy-MM-dd
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern=[%-5p] %d{yyyy-MM-dd HH\:mm\:ss} %C{8}@(%F\:%L)\:%m%n


#######输出格式解释#######
#%d: 日志打印的时间点，默认格式为ISO8601，也可以另外指定格式，
   #定义如下： %d{yyy年MM月dd日 HH时mm分ss秒SSS}，则会输出：
   #2018年10月06日 14时47分45秒590
#%p: 输出日志级别，即DEBUG，INFO，WARN，ERROR，FATAL
   #%-5p：表示字符小于5位，则字符居左（不加“-”号则字符居右），你可以举一反三
#%c: 日志所在类的全名
#%M: 日志所在方法的名字
#%m: 日志信息
#%n: 输出一个回车换行符
#%L: 输出代码中的行号
